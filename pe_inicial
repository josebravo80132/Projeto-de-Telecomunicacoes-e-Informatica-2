#!/usr/bin/env python

import socket

import time

milliseconds_inicial = 0
milliseconds_final = 0


##def latencia(ip_inicial, ip_final):

#	UDP_IP = "127.0.10.0"
#	UDP_PORT = 5010
#	MESSAGE = b"Hello, World!"
#	print("UDP target IP: %s" % UDP_IP)
#	print("UDP target port: %s" % UDP_PORT)
#	print("message: %s" % MESSAGE)

#	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
#	sock.sendto(MESSAGE, (UDP_IP, UDP_PORT))
#	msg_ip_final = sock.recvfrom(1024)

#	return msg_ip_final



TCP_IP = '127.0.0.1'
TCP_PORT = 5005
BUFFER_SIZE = 20  # Normally 1024, but we want fast response

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((TCP_IP, TCP_PORT))
s.listen(1)

conn, addr = s.accept()
print('Connection address:', addr)


while 1:
	data = conn.recv(BUFFER_SIZE)
	if not data: break
	else:

		busca_ip = data.decode()
		x = busca_ip.split(" ",1)
		ip_final = x[1]
		#resultado_do_teste = latencia(TCP_IP,ip_final)

		UDP_IP = '127.0.10.0'
		UDP_PORT = 5010

		MESSAGE = b"Hello, World!"
		print("UDP target IP: %s" % UDP_IP)
		print("UDP target port: %s" % UDP_PORT)
		print("message: %s" % MESSAGE)

		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP

		milliseconds_inicial = float(round(time.time() * 10000000))

		print("comecou\n")
		print(milliseconds_inicial)
		print("\n 2222comecou 22222222222222\n")

		sock.sendto(MESSAGE, (UDP_IP, UDP_PORT))
		sock.close()
##-------------------------------->>>>>>>>>>>>>>>>>>>> novo udp <<<<<<<<<<<<<<<<<<<<--------------------------
		UDP_IP = '127.0.10.10'
		UDP_PORT = 5015

		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
		sock.bind((UDP_IP, UDP_PORT))

		if True :

			data, addr = sock.recvfrom(1024) # buffer size is 1024 bytel
			milliseconds_final = float(round(time.time() * 10000000))

			print("comecou\n")
			print(milliseconds_inicial)
			print("\n 2222comecou 22222222222222\n")
			print("received message: %s" % data)

		sock.close()

	msg_ip_final = float(milliseconds_final)-float(milliseconds_inicial)

	print("received data:", data)
	conn.send(str(msg_ip_final).encode())  # echo
conn.close()
