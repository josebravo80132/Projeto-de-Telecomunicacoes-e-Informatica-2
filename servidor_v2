
import socket

message_enviar = -1
ip_inicial = -1
ip_final = -1
tipo_teste = -1

def begin():
	return 1


def start():
	return 4


def tutorial():
	return 2


def sair():
	print("O servidor encerrrou sessao.")
	return 3

def m():

	print("o teste fez o espectavel")
	return 1

def lista_peers():
	return 10


def lista_testes():
	return 1


def latencia():

	global ip_inicial
	global ip_final

	msg = "start "

	print("ola\n")
	print("entrou aqui\n")
	print("nÃ£o mostra var \n")
	print(ip_inicial)

	TCP_IP = ip_inicial
	TCP_PORT = 5005
	BUFFER_SIZE = 1024
	MESSAGE = msg+ip_final
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((TCP_IP, TCP_PORT))
	s.send(MESSAGE.encode())
	data = s.recv(BUFFER_SIZE)
	s.close()
	print("received data:", data.decode())

	return data.decode()


def Perda_pacotes():
	return 1


def Largura_banda():
	return 1

def Disponibilidade():
	return 1


def switch_serv(number):

	switcher = {
		0:begin,
		1:start,
		2:tutorial,
		3:sair,
		4:lista_peers,
		5:m,
		6:m,
		7:m,
		8:m,
		9:m,
		10:lista_testes,
		11:latencia,
		12:Perda_pacotes,
		13:Largura_banda,
		14:Disponibilidade,
		15:m
	}

	func = switcher.get(number)
	return func()


def server_program():
	# get the hostname
	host = socket.gethostname()
	port = 5000  # initiate port no above 1024

	server_socket = socket.socket()  # get instance
	# look closely. The bind() function takes tuple as argument
	server_socket.bind((host, port))  # bind host address and port together

	# configure how many client the server can listen simultaneously
	server_socket.listen(2)
	conn, address = server_socket.accept()  # accept new connection
	print("Connection from: " + str(address))
	while True:
		# receive data stream. it won't accept data packet greater than 1024 bytes
		data = conn.recv(1024).decode()
		if not data:
			# if data is not received break
			break

		else :

			global message_enviar

			if( len(data)>2):

				x=data.split(" ", 1)

				global ip_inicial
				global ip_final

				ip_inicial = x[0]
				ip_final = x[1]
				message_enviar = 10


			if( len(data)<=2):
				x=int(data)
				print(x)
				print("oalolaoal \n")
				message_enviar = switch_serv(x)
				print(message_enviar)

			print("from connected user: " + str(data))
			conn.send(str(message_enviar).encode())  # send data to the client

	conn.close()  # close the connection


if __name__ == '__main__':
	server_program()

